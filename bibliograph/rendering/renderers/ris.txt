RIS Renderer
============

Add a lightweight content object implementing IBibliographicReference.

  >>> from bibliograph.rendering.tests.test_doctests import setUp, SimpleContent
  >>> setUp()
  >>> context = SimpleContent()

Call the RIS render view

  >>> from zope.publisher.browser import TestRequest
  >>> from bibliograph.rendering.renderers.endnote import RisRenderView

  >>> request = TestRequest()
  >>> view = RisRenderView(context, request)

  >>> print view()  # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
  TY  - BOOK
  ED  - Müller, Heinz
  PY  - 1985
  DA  - 1985//
  TI  - A new approach to managing literatüre
  KW  - Manage Literatür
  AB  - Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
  SN  - 1234567890
  UR  - http://www.books.com/approach
  DO  - 0987654321
  ID  - approach
  ER  ...
  <BLANKLINE>

Let's change some attributes of our content.

First we want no editor, but an author:

  >>> context.editor_flag = False
  >>> view = RisRenderView(context, request)
  >>> print view()  # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
  TY  - BOOK
  AU  - Müller, Heinz
  PY  - 1985
  DA  - 1985//
  TI  - A new approach to managing literatüre
  KW  - Manage Literatür
  AB  - Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
  SN  - 1234567890
  UR  - http://www.books.com/approach
  DO  - 0987654321
  ID  - approach
  ER  ...
  <BLANKLINE>


We can also omit some fields:

  >>> request = TestRequest(form=dict(omit_fields=['authors', 'uRl', 'abSTRACT']))
  >>> view = RisRenderView(context, request)
  >>> print view()  # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
  TY  - BOOK
  PY  - 1985
  DA  - 1985//
  TI  - A new approach to managing literatüre
  KW  - Manage Literatür
  SN  - 1234567890
  DO  - 0987654321
  ID  - approach
  ER  ...
  <BLANKLINE>


